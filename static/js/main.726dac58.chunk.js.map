{"version":3,"sources":["redux/reducer/todoSlice.tsx","components/App/index.tsx","redux/store/store.tsx","index.tsx"],"names":["initialState","todos","editId","undefined","todosSlice","createSlice","name","reducers","setTodos","state","action","push","payload","deleteTodo","filter","data","id","changeIsdone","map","isDone","changeEditId","editTodo","content","actions","selectTodos","todoList","selectEditId","TodoList","handelDeleteTodo","handleChangeIsDone","handleEditBtn","todo","onClick","App","props","useState","inputValue","setInputValue","dispatch","useDispatch","useSelector","console","log","handleSubmit","useCallback","e","preventDefault","trim","find","onSubmit","value","onChange","target","configureStore","reducer","ReactDOM","store","document","getElementById"],"mappings":"gKAaMA,EAA8B,CAAEC,MAAO,GAAIC,YAAQC,GAE5CC,EAAaC,YAAY,CACpCC,KAAM,WACNN,eACAO,SAAU,CACRC,SAAU,SAACC,EAAOC,GAChBD,EAAMR,MAAMU,KAAKD,EAAOE,UAE1BC,WAAY,SAACJ,EAAOC,GAClBD,EAAMR,MAAQQ,EAAMR,MAAMa,QAAO,SAACC,GAAD,OAAUA,EAAKC,KAAON,EAAOE,YAEhEK,aAAc,SAACR,EAAOC,GACpBD,EAAMR,MAAQQ,EAAMR,MAAMiB,KAAI,SAACH,GAAD,OAC5BA,EAAKC,KAAON,EAAOE,QAAnB,2BAAkCG,GAAlC,IAAwCI,QAASJ,EAAKI,SAAWJ,MAGrEK,aAAc,SAACX,EAAOC,GACpBD,EAAMP,OAASQ,EAAOE,SAExBS,SAAU,SAACZ,EAAOC,GAChBD,EAAMR,MAAQQ,EAAMR,MAAMiB,KAAI,SAACH,GAAD,OAC5BA,EAAKC,KAAOP,EAAMP,OAAlB,2BAAgCa,GAAhC,IAAsCO,QAASZ,EAAOE,UAAYG,S,EAYtEX,EAAWmB,QALbf,E,EAAAA,SACAK,E,EAAAA,WACAI,E,EAAAA,aACAG,E,EAAAA,aACAC,E,EAAAA,SAOWG,EAAc,SAACf,GAAD,OAAkBA,EAAMgB,SAASxB,OAE/CyB,EAAe,SAACjB,GAAD,OAAkBA,EAAMgB,SAASvB,QAE9CE,IAAf,QCvCMuB,EAKD,SAAC,GAAoE,IAAlE1B,EAAiE,EAAjEA,MAAO2B,EAA0D,EAA1DA,iBAAkBC,EAAwC,EAAxCA,mBAAoBC,EAAoB,EAApBA,cACnD,OACE,8BACG7B,EAAMiB,KAAI,SAACa,GAAD,OACT,gCACE,8BAAMA,EAAKZ,OAAS,4BAAIY,EAAKT,UAAeS,EAAKT,UACjD,wBAAQU,QAAS,kBAAMH,EAAmBE,EAAKf,KAA/C,SACGe,EAAKZ,OAAS,SAAW,SAE5B,yBAAQa,QAAS,kBAAMJ,EAAiBG,EAAKf,KAA7C,qBACWe,EAAKf,MAEhB,wBAAQgB,QAAS,kBAAMF,EAAcC,EAAKf,KAA1C,oBARQe,EAAKf,UAmBnBA,EAAK,EAyEMiB,EAvEH,SAACC,GAAsB,MAEGC,mBAAS,IAFZ,mBAE1BC,EAF0B,KAEdC,EAFc,KAG3BC,EAAWC,cACXtC,EAAQuC,YAAYhB,GACpBtB,EAASsC,YAAYd,GAC3Be,QAAQC,IAAIzC,GAEZ,IAAM0C,EAAkDC,uBACtD,SAACC,GACCA,EAAEC,iBACGV,EAAWW,SACZ7C,EACFoC,EAASjB,EAASe,KAElBE,EAAS9B,EAAS,CAAEQ,KAAIM,QAASc,EAAYjB,QAAQ,KACrDH,GAAM,GAERqB,EAAc,OAEhB,CAACD,EAAYlC,EAAQoC,IAGjBT,EAAqBe,uBACzB,SAAC5B,GACCsB,EAASrB,EAAaD,MAExB,CAACsB,IAGGV,EAAmBgB,uBACvB,SAAC5B,GACCsB,EAASzB,EAAWG,MAEtB,CAACsB,IAGGR,EAAgBc,uBACpB,SAAC5B,GACC,IAAMe,EAAO9B,EAAM+C,MAAK,SAACjB,GAAD,OAAUA,EAAKf,KAAOA,KAE1Ce,IACFM,EAAcN,EAAKT,SACnBgB,EAASlB,EAAaJ,OAG1B,CAACf,EAAOqC,IAGV,OACE,qCACE,wCAAWJ,EAAM5B,QACjB,gCACE,uBAAM2C,SAAUN,EAAhB,UACE,uBACEO,MAAOd,EACPe,SAAU,SAACN,GAAD,OAAOR,EAAcQ,EAAEO,OAAOF,UAE1C,+CAEF,cAAC,EAAD,CACEjD,MAAOA,EACP4B,mBAAoBA,EACpBD,iBAAkBA,EAClBE,cAAeA,WC7GVuB,cAAe,CAC5BC,QAAS,CACP7B,SAAUrB,KCEdmD,SACE,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACE,cAAC,EAAD,CAAKlD,KAAK,UAEZmD,SAASC,eAAe,W","file":"static/js/main.726dac58.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\ninterface TodoData {\n  id: number;\n  content: string;\n  isDone: boolean;\n}\n\ninterface initStateType {\n  todos: TodoData[];\n  editId: number | undefined;\n}\n\nconst initialState: initStateType = { todos: [], editId: undefined };\n\nexport const todosSlice = createSlice({\n  name: 'todoList',\n  initialState,\n  reducers: {\n    setTodos: (state, action) => {\n      state.todos.push(action.payload);\n    },\n    deleteTodo: (state, action) => {\n      state.todos = state.todos.filter((data) => data.id !== action.payload);\n    },\n    changeIsdone: (state, action) => {\n      state.todos = state.todos.map((data) =>\n        data.id === action.payload ? { ...data, isDone: !data.isDone } : data\n      );\n    },\n    changeEditId: (state, action) => {\n      state.editId = action.payload;\n    },\n    editTodo: (state, action) => {\n      state.todos = state.todos.map((data) =>\n        data.id === state.editId ? { ...data, content: action.payload } : data\n      );\n    },\n  },\n});\n\nexport const {\n  setTodos,\n  deleteTodo,\n  changeIsdone,\n  changeEditId,\n  editTodo,\n} = todosSlice.actions;\n\ninterface State {\n  todoList: initStateType;\n}\n\nexport const selectTodos = (state: State) => state.todoList.todos;\n\nexport const selectEditId = (state: State) => state.todoList.editId;\n\nexport default todosSlice.reducer;\n","import React, { FormEventHandler, useCallback, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  setTodos,\n  deleteTodo,\n  changeIsdone,\n  editTodo,\n  selectTodos,\n  selectEditId,\n  changeEditId,\n} from 'redux/reducer/todoSlice';\n\ninterface TodoData {\n  id: number;\n  content: string;\n  isDone: boolean;\n}\n\nconst TodoList: React.FC<{\n  todos: TodoData[];\n  handleChangeIsDone: (id: number) => void;\n  handelDeleteTodo: (id: number) => void;\n  handleEditBtn: (id: number) => void;\n}> = ({ todos, handelDeleteTodo, handleChangeIsDone, handleEditBtn }) => {\n  return (\n    <div>\n      {todos.map((todo: TodoData) => (\n        <div key={todo.id}>\n          <div>{todo.isDone ? <s>{todo.content}</s> : todo.content}</div>\n          <button onClick={() => handleChangeIsDone(todo.id)}>\n            {todo.isDone ? 'Resume' : 'Done'}\n          </button>\n          <button onClick={() => handelDeleteTodo(todo.id)}>\n            delete #{todo.id}\n          </button>\n          <button onClick={() => handleEditBtn(todo.id)}>Edit</button>\n        </div>\n      ))}\n    </div>\n  );\n};\n\ninterface HelloProps {\n  name: string;\n}\n\nlet id = 1;\n\nconst App = (props: HelloProps) => {\n  // const [todos, setTodos] = useState<TodoData[]>([]);\n  const [inputValue, setInputValue] = useState('');\n  const dispatch = useDispatch();\n  const todos = useSelector(selectTodos);\n  const editId = useSelector(selectEditId);\n  console.log(todos);\n\n  const handleSubmit: FormEventHandler<HTMLFormElement> = useCallback(\n    (e) => {\n      e.preventDefault();\n      if (!inputValue.trim()) return;\n      if (editId) {\n        dispatch(editTodo(inputValue));\n      } else {\n        dispatch(setTodos({ id, content: inputValue, isDone: false }));\n        id += 1;\n      }\n      setInputValue('');\n    },\n    [inputValue, editId, dispatch]\n  );\n\n  const handleChangeIsDone = useCallback(\n    (id: number) => {\n      dispatch(changeIsdone(id));\n    },\n    [dispatch]\n  );\n\n  const handelDeleteTodo = useCallback(\n    (id: number) => {\n      dispatch(deleteTodo(id));\n    },\n    [dispatch]\n  );\n\n  const handleEditBtn = useCallback(\n    (id: number) => {\n      const todo = todos.find((todo) => todo.id === id);\n\n      if (todo) {\n        setInputValue(todo.content);\n        dispatch(changeEditId(id));\n      }\n    },\n    [todos, dispatch]\n  );\n\n  return (\n    <>\n      <h1>Hello {props.name}</h1>\n      <div>\n        <form onSubmit={handleSubmit}>\n          <input\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n          />\n          <button>Submit</button>\n        </form>\n        <TodoList\n          todos={todos}\n          handleChangeIsDone={handleChangeIsDone}\n          handelDeleteTodo={handelDeleteTodo}\n          handleEditBtn={handleEditBtn}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport todosSlice from '../reducer/todoSlice';\n\nexport default configureStore({\n  reducer: {\n    todoList: todosSlice,\n  },\n});\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport App from './components/App';\nimport store from './redux/store/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App name=\"Awu\" />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}